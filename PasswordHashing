package passwordhashmap;

import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class PasswordHashing {

	@SuppressWarnings("unused")
	private static final long serialVersionUID = 4082662245779992492L;

	private Map<String, String> DB = new HashMap<String, String>();

	public Map<String, String> getDB() {
		return DB;
	}

	private static final char[] SALT = { 'd', 'i', 'a', 'm', 'o', 'n', 'd' };

	public void signup(String username, char[] password) {
		char[] saltedPassword = new char[SALT.length + password.length];
		System.arraycopy(SALT, 0, saltedPassword, 0, SALT.length);
		System.arraycopy(password, 0, saltedPassword, SALT.length, password.length);
		byte[] saltedPasswordBytes = toBytes(saltedPassword);
		String hashedPassword = generateHash(saltedPasswordBytes);

		DB.put(username, hashedPassword);
	}

	public Boolean login(String username, char[] password) {
		Boolean isAuthenticated = false;
		// Use the same SALT value
		char[] saltedPassword = new char[SALT.length + password.length];
		System.arraycopy(SALT, 0, saltedPassword, 0, SALT.length);
		System.arraycopy(password, 0, saltedPassword, SALT.length, password.length);
		byte[] saltedPasswordBytes = toBytes(saltedPassword);
		String hashedPassword = generateHash(saltedPasswordBytes);
		String storedPasswordHash = DB.get(username);

		if (hashedPassword.equals(storedPasswordHash)) {

			isAuthenticated = true;

		} else {

			isAuthenticated = false;

		}

		return isAuthenticated;
	}

	public static String generateHash(byte[] input) {

		StringBuilder hash = new StringBuilder();

		try {
			MessageDigest sha = MessageDigest.getInstance("SHA-1");
			byte[] hashedBytes = sha.digest(input);
			char[] digits = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
			for (int idx = 0; idx < hashedBytes.length; ++idx) {
				byte b = hashedBytes[idx];
				hash.append(digits[(b & 0xf0) >> 4]);
				hash.append(digits[b & 0x0f]);
			}
		} catch (NoSuchAlgorithmException e) {

		}

		return hash.toString();
	}

	// Convert a character array to byte array
	private byte[] toBytes(char[] chars) {
		CharBuffer charBuffer = CharBuffer.wrap(chars);
		ByteBuffer byteBuffer = Charset.forName("UTF-8").encode(charBuffer);
		byte[] bytes = Arrays.copyOfRange(byteBuffer.array(), byteBuffer.position(), byteBuffer.limit());
		Arrays.fill(charBuffer.array(), '\u0000'); // clear sensitive data
		Arrays.fill(byteBuffer.array(), (byte) 0); // clear sensitive data
		return bytes;
	}
	
	// Filtering out illegal characters; To be used for the username field
	public boolean containsIllegalChars(String input) {
		boolean isIllegal = false;
		String[] stringChars = input.split("[^ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_]", 2);

		if (stringChars.length > 1) {
			isIllegal = true;
		} else {
			isIllegal = false;
		}

		return isIllegal;
	}
}
